df.dropna(inplace = True)
import matplotlib.pyplot as plt

plt.boxplot(df["fare_amount"])

low = df["fare_amount"].quantile(0.01)
high = df["fare_amount"].quantile(0.99)
df = df[(df["fare_amount"] < high) & (df["fare_amount"] > low)]

plt.boxplot(df["fare_amount"])

df2 = df.select_dtypes(include = ["float64", "int64"])
df2.corr()

x = df.drop(["Unnamed: 0", "key", "fare_amount"], axis = 1)
x["pickup_datetime"] = pd.to_numeric(pd.to_datetime(x["pickup_datetime"]))

y = df["fare_amount"]

from sklearn.model_selection import train_test_split
xTrain, xTest, yTrain, yTest = train_test_split(x, y, random_state=0, test_size=0.25)

from sklearn.linear_model import LinearRegression
lr = LinearRegression()
lr.fit(xTrain, yTrain)
yPred = lr.predict(xTest)

from sklearn.metrics import mean_squared_error, r2_score

np.sqrt(mean_squared_error(yTest, yPred))
r2_score(yTest, yPred)

from sklearn.ensemble import RandomForestRegressor
rf = RandomForestRegressor(n_estimators=100, random_state=101)
rf.fit(xTrain, yTrain)
yPred = rf.predict(xTest)

np.sqrt(mean_squared_error(yTest, yPred))
r2_score(yTest, yPred)